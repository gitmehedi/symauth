<?php

namespace SystemUsersBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends EntityRepository
{

    private $userId;

    public function saveUserInformation(User $user, UserMeta $userMeta)
    {
        $prepareSlug = $this->prepareSlug($user, $userMeta);

        $dm       = $this->getEntityManager();
        $roles    = $user->getUserTypeId()? : 'ROLE_USER';
        $userType = $user->getUserTypeId()? : 0;
        $dm->beginTransaction();

        try {
            $user->setUsername($prepareSlug)
                    ->setSlug($prepareSlug)
                    ->setUserTypeId($userType)
                    ->setRoles(array($roles));

            $dm->persist($user);
            $dm->flush();
            $this->userId = $user->getId();
            $prepareSlug  = $this->prepareSlug($user, $userMeta);

            if ($this->userId) {
                $userMeta->setImage($userMeta->getImage())
                        ->setDateOfBirth(new \DateTime('now'))
                        ->setNationalIdImage($userMeta->getSignatureImage())
                        ->setSignatureImage($userMeta->getNationalIdImage())
                        ->setUser($user)
                        ->setPresentdistrictInfo($userMeta->getPresentDistrict())
                        ->setJobDistricts($userMeta->getJobLocation())
                        ->setPresentStationInfo($userMeta->getPresentPoliceStation())
                        ->setPermanentdistrictInfo($userMeta->getPermanentDistrict())
                        ->setPermanentStationInfo($userMeta->getPermanentPoliceStation())
                        ->setMobileNo($userMeta->getMobileNo())
                        ->setCreatedAt(new \DateTime('now'))
                        ->setUpdatedAt(new \DateTime('now'));

                $dm->persist($userMeta);
                $dm->flush();
            }
            if ($this->userId) {
                $user->setUsername($prepareSlug);
                $dm->flush();
            }
        } catch (\Exception $e) {
            $dm->rollback();
            return "Database operation temporary unavailable";
        }

        return $user->getId();
    }

    public function getDICorFO($data)
    {
        $type      = empty($data['role']) ? 'ROLE_AGENT' : $data['role'];
        $position  = empty($data['position']) ? 0 : $data['position'];
        $appStatus = empty($data['status']) ? 0 : $data['status'];

        $query = $this->createQueryBuilder('u')
                ->select('u.id,u.username,u.email,u.appStatus,u.position,um.name,um.image,d.fullName')
                ->innerJoin('u.usermeta', 'um')
                ->innerJoin('um.permanentDistrictInfo', 'd')
                ->andWhere("u.roles LIKE :type AND u.position = :position AND u.appStatus = :appStatus")
                ->setParameter('type', "%{$type}%")
                ->setParameter('position', $position)
                ->setParameter('appStatus', $appStatus)
                ->orderBy('u.id', 'DESC');


        try {
            $result = $query->getQuery()->getArrayResult();
            return $result;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function updateUser(User $user, UserMeta $userMeta)
    {

        $roles = $user->getUserTypeId()? : 'ROLE_USER';
        $dm    = $this->getEntityManager();

//        $user->setAppStatus(1);
//
//        $dm->persist($user);
//        $dm->flush();
        $this->userId = $user->getId();
        $prepareSlug  = $this->prepareSlug($user, $userMeta);

        if ($this->userId) {
            $userMeta->setImage($userMeta->getImage())
                    ->setJobLocation($userMeta->getJobDistricts()->getId())
                    ->setPresentDistrict($userMeta->getPresentDistrict()->getId())
                    ->setPresentPoliceStation($userMeta->getPresentPoliceStation()->getId())
                    ->setPermanentDistrict($userMeta->getPermanentDistrict()->getId())
                    ->setPermanentPoliceStation($userMeta->getPermanentPoliceStation()->getId())
                    ->setUpdatedAt(new \DateTime('now'));

//            $dm->persist($userMeta);
            $dm->flush();
        }
        if ($this->userId) {
            $user->setSlug($prepareSlug);
            $dm->flush();
        }

        return $this->userId;
    }

    public function getAllUserByType($data)
    {
        $type    = empty($data['role']) ? 'ROLE_USER' : $data['role'];
        $memDist = empty($data['dist']) ? 0 : $data['dist'];

        $query = $this->createQueryBuilder('u')
                ->select('u,um')
                ->innerJoin('u.usermeta', 'um')
                ->andWhere("u.roles LIKE :type")
                ->setParameter('type', "%{$type}%")
                ->orderBy('u.id', 'DESC');
        if ($memDist) {
            $query->andWhere("um.presentDistrict = :district")
                    ->setParameter('district', $memDist);
        }
        try {
            $result = $query->getQuery()->getArrayResult();

            return $result;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getAllApplicantBy($data, $type = 'ROLE_USER')
    {
        $district = $data['district'];
        $status   = $data['appStatus'];
        $query    = $this->createQueryBuilder('u')
                ->select('u.id,u.username,u.email,u.appStatus,u.position,um.name,um.image,d.fullName')
                ->innerJoin('u.usermeta', 'um')
                ->innerJoin('um.permanentDistrictInfo', 'd')
                ->andWhere("u.roles LIKE :type")
                ->setParameter('type', "%{$type}%")
                ->orderBy('u.id', 'DESC');

        if ($district) {
            $query->andWhere("um.presentDistrict=:district")
                    ->setParameter('district', $district);
        }
        if ($status) {
            $query->andWhere("u.appStatus= :status")
                    ->setParameter('status', $status);
        }

        try {
            $result = $query->getQuery()->getArrayResult();
            return $result;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function checkUsername($username)
    {
        $query = $this->createQueryBuilder('u')
                ->select('u')
                ->andWhere("u.username = :username")
                ->setParameter('username', $username);

        try {
            $result = $query->getQuery()->getArrayResult();
            return count($result) > 0 ? true : false;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function prepareSlug($user, $userMeta)
    {
        $dm     = $this->getEntityManager();
        $pDisId = $userMeta->getPresentDistrict()->getId();

        $zoneName = $dm->getRepository('SporshoUserBundle:Zone')->zoneName($pDisId);
        $zoneName = $zoneName->getCode();

        $thana = $userMeta->getPresentPoliceStation()->getShortName();

        $role = $user->getRoles()[0];
        $id   = sprintf('%1$03d', $this->userId);

        if ($role == 'ROLE_AGENT') {
            return $zoneName . $thana . $id . '0000';
        } elseif ($role == 'ROLE_MEMBER') {
            $agentId = $this->getAgentId($pDisId);
            $agentId = $agentId > 0 ? sprintf('%1$04d', $agentId) : 0000;
            return $zoneName . $thana . $id . $agentId;
        } else {
            return $zoneName . $thana . $id . '0000';
        }
    }

    public function prepareSlugForAgent($user, $userMeta)
    {

        $dm     = $this->getEntityManager();
        $pDisId = $userMeta->getPresentDistrict();

        $zoneName = $dm->getRepository('SporshoUserBundle:Zone')->zoneName($pDisId);
        $zoneName = $zoneName->getCode();

        $thana = $dm->getRepository('SporshoUserBundle:PoliceStation')->findOneBy(array('id' => $userMeta->getPresentPoliceStation()));
        $thana = $thana->getShortName();

        $role = $user->getRoles()[0];
        $id   = sprintf('%1$04d', $user->getId());

        if ($role == 'ROLE_AGENT') {
            return $zoneName . $thana . $id . '0000';
        } elseif ($role == 'ROLE_MEMBER') {
            $agentId = $this->getAgentId($pDisId);
            $agentId = $agentId > 0 ? sprintf('%1$03d', $agentId) : 0000;
            return $zoneName . $thana . $id . $agentId;
        } else {
            return $zoneName . $thana . $id . '0000';
        }
    }

    public function getAgentId($pDisId)
    {
        $query = $this->createQueryBuilder('u')
                ->select('u.id')
                ->innerJoin('u.usermeta', 'um')
                ->andWhere("u.roles LIKE :type")
                ->andWhere("um.presentDistrict=:district")
                ->setParameter('type', "%ROLE_AGENT%")
                ->setParameter('district', $pDisId);

        try {
            $result = $query->getQuery()->getArrayResult();

            return $result ? $result[0]['id'] : 0000;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function rmUser($id)
    {

        $dm    = $this->getEntityManager();
        $dm->beginTransaction();
        $state = 0;

        $edu = $dm->getRepository('SporshoUserBundle:Education')->findBy(array('userId' => $id));

        if (count($edu) > 0) {

            foreach ($edu as $data) {

                $dm->remove($data);
            }
            $state = $dm->flush() ? $state : ++$state;
        }

        $um = $dm->getRepository('SporshoUserBundle:UserMeta')->findOneBy(array('userId' => $id));
        if ($um && ($state == 1)) {
            $dm->remove($um);
            $state = $dm->flush() ? $state : ++$state;
        }

        $user = $dm->getRepository('SporshoUserBundle:User')->findOneBy(array('id' => $id));
        if ($user && ($state == 2)) {
            $dm->remove($user);
            $state = $dm->flush() ? $state : ++$state;
        }

        if ($state == 3) {
            $dm->commit();
            return true;
        } else {
            $dm->rollback();
            return false;
        }
    }

}
